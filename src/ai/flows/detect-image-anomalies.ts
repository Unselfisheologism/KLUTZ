// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for detecting anomalies in medical images.
 *
 * - detectImageAnomalies - A function that takes a medical image as input and returns a report highlighting potential anomalies.
 * - DetectImageAnomaliesInput - The input type for the detectImageAnomalies function, which includes the image data URI.
 * - DetectImageAnomaliesOutput - The output type for the detectImageAnomalies function, which includes the analysis report.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectImageAnomaliesInputSchema = z.object({
  imageDataUri: z
    .string()
    .describe(
      'A medical image (X-ray, MRI, CT scan) as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' 
    ),
});
export type DetectImageAnomaliesInput = z.infer<typeof DetectImageAnomaliesInputSchema>;

const DetectImageAnomaliesOutputSchema = z.object({
  report: z.string().describe('A structured medical report highlighting potential anomalies, findings, possible differential diagnoses and relevant recommendations.'),
});
export type DetectImageAnomaliesOutput = z.infer<typeof DetectImageAnomaliesOutputSchema>;

export async function detectImageAnomalies(input: DetectImageAnomaliesInput): Promise<DetectImageAnomaliesOutput> {
  return detectImageAnomaliesFlow(input);
}

const detectImageAnomaliesPrompt = ai.definePrompt({
  name: 'detectImageAnomaliesPrompt',
  input: {schema: DetectImageAnomaliesInputSchema},
  output: {schema: DetectImageAnomaliesOutputSchema},
  prompt: `You are an AI assistant specialized in analyzing medical images and generating medical reports.

  Analyze the provided medical image for any anomalies, and then generate a structured medical report which contains findings, possible differential diagnoses and relevant recommendations.
  Pay close attention to detail and provide a comprehensive analysis.

  Image: {{media url=imageDataUri}}
  `,
});

const detectImageAnomaliesFlow = ai.defineFlow(
  {
    name: 'detectImageAnomaliesFlow',
    inputSchema: DetectImageAnomaliesInputSchema,
    outputSchema: DetectImageAnomaliesOutputSchema,
  },
  async input => {
    const {output} = await detectImageAnomaliesPrompt(input);
    return output!;
  }
);
